<form action="" id="contact-form" novalidate autocomplete="off">
	<div class="form-group column" data-validate="with-icon">
		<label for="name">Nombre: *</label>
		<input
			id="name"
			type="text"
			pattern="^[A-Za-zÀ-ÿ\s]+$"
			name="name"
			placeholder="Tu nombre"
			required
		/>
		<p class="error-message"></p>
	</div>

	<div class="form-group column" data-validate="with-icon">
		<label for="email">Correo electrónico: *</label>
		<input
			id="email"
			type="email"
			name="email"
			placeholder="Tu email"
			required
		/>
		<p class="error-message"></p>
	</div>

	<div class="form-group">
		<fieldset class="column">
			<legend> &nbsp; Elige tratamiento &nbsp;</legend>
			<div>
				<input type="checkbox" id="massage" name="services" value="massage" />
				<label for="massage">Masaje</label>
			</div>
			<div>
				<input
					id="nutrition"
					type="checkbox"
					name="services"
					value="nutrition"
				/>
				<label for="nutrition">Nutrición</label>
			</div>
			<div>
				<input
					id="biomagnet"
					type="checkbox"
					name="services"
					value="biomagnet"
				/>
				<label for="biomagnet">Biomagnetismo</label>
			</div>
			<div>
				<input
					id="osteopathy"
					type="checkbox"
					name="services"
					value="osteopathy"
				/>
				<label for="osteopathy">Ostepatía</label>
			</div>
		</fieldset>
		<p class="error-message"></p>
	</div>

	<div class="form-group column">
		<label for="comments">Mensaje: *</label>
		<textarea
			id="comments"
			name="comments"
			placeholder="Escribe tu mensaje"
			minlength="100"
			required></textarea>
		<p class="error-message"></p>
	</div>

	<div class="form-group column">
		<input id="submit-button" class="btn" type="submit" value="Enviar" />
	</div>
</form>

<style>
	form {
		color: var(--bg-color);
		background: var(--clr-transparent-30);

		margin: 0 auto;
		width: 95%;
		max-width: 600px;

		& p {
			margin: 0;
		}
	}

	.form-group {
		margin-block-end: var(--rem-spacing-150);
		position: relative;
	}

	.column {
		display: flex;
		flex-direction: column;
		gap: var(--rem-spacing-75);
	}

	input::placeholder,
	textarea::placeholder {
		color: var(--clr-ui-200);
	}

	input:not([type='submit']),
	textarea {
		padding: var(--em-spacing-75);
		border-radius: var(--rad-25);
		color: var(--text-color);

		&:focus {
			outline-offset: 4px;
		}
	}

	input:placeholder-shown,
	textarea:placeholder-shown {
		background-color: var(--bg-color);
	}

	input:not(:placeholder-shown),
	textarea:not(:placeholder-shown) {
		background-color: white;
	}

	input[type='checkbox'] {
		margin-right: var(--em-spacing-50);
		accent-color: var(--clr-primary-100);
	}

	input[type='submit'] {
		font-size: clamp(var(--fs-phone-h4), 2vw, var(--fs-desktop-h3));
		color: var(--bg-color);
		font-weight: var(--fw-500);
		background-color: var(--text-color);
		margin: 0 auto;
		border: 2px solid var(--clr-primary-200);

		&:hover {
			background-color: var(--bg-color);
			color: var(--text-color);
		}

		&:focus {
			opacity: 0.75;
		}
	}

	legend {
		margin-left: var(--em-spacing-100);
		margin-block-end: var(--em-spacing-75);
	}

	label,
	legend {
		font-size: clamp(
			calc(var(--fs-phone-regular) * 1.1),
			1.45vw,
			calc(var(--fs-desktop-regular) * 1.1)
		);
	}

	.error-message {
		height: calc(var(--fs-phone-regular) + calc(var(--em-spacing-75)));
		width: fit-content;
		padding: var(--em-spacing-75) var(--em-spacing-25);
		border-radius: var(--rad-25);

		font-size: clamp(
			var(--fs-phone-regular),
			1.45vw,
			var(--fs-desktop-regular)
		);
		color: red;
		font-weight: var(--fw-500);

		display: flex;
		justify-content: center;
		align-items: center;
	}

	input:user-valid,
	textarea:user-valid {
		background-color: var(--clr-primary-100);
	}

	input:user-invalid,
	textarea:user-invalid {
		background-color: var(--clr-tertiary-200);
	}

	[data-validate='with-icon']::before {
		content: '';
		font-weight: 900;
		font-size: clamp(var(--fs-phone-h4), 2vw, var(--fs-desktop-h3));
		position: absolute;
		right: 0;
		width: fit-content;
		height: 100%;
		padding-inline-end: var(--em-spacing-75);

		display: flex;
		align-items: center;
	}

	[data-validate='with-icon'].valid::before {
		content: '✔';
		color: green;
	}

	[data-validate='with-icon'].invalid::before {
		content: '✖';
		color: red;
	}
</style>

<script lang="ts">
	const form = document.getElementById('contact-form');
	const name = document.getElementById('name');
	const email = document.getElementById('email');
	const textarea = document.getElementById('comments');
	const errorName = name.parentElement.lastElementChild;
	const errorEmail = email.parentElement.lastElementChild;
	const errorTextarea = textarea.parentElement.lastElementChild;

	let isTouched = false;
	let emailIsTouched = false;
	let textareaIsTouched = false;

	form.addEventListener('submit', (event) => {
		event.preventDefault();
		const isFormValid = form.checkValidity();
		const isCheckboxValid = checkboxHandler();
		const isTextareaValid = textarea.checkValidity();
		console.log(isCheckboxValid);

		if (isFormValid && isCheckboxValid && isTextareaValid) {
			console.log('Valid from');
		} else {
			console.log('Invalid form');
		}
	});

	name.addEventListener('input', () => {
		if (name.checkValidity() === true) {
			displayValidationIcon('valid');
			errorName.textContent = '';
		} else if (!name.checkValidity() && isTouched) {
			displayValidationIcon('invalid');
		} else {
			console.log('invalid input');
		}
	});

	name.addEventListener('change', (event) => {
		const validity = event.target.validity;

		if (!isTouched) isTouched = true;

		if (!validity.valid) {
			displayValidationIcon(event, 'invalid');
			errorName.textContent = showErrorFor(event.target);
		}
	});

	email.addEventListener('change', () => {
		emailIsTouched = true;

		if (checkEmailPattern() === false) {
			email.setCustomValidity('Please enter a valid email address.');
			errorEmail.textContent = email.validationMessage;
			displayValidationIcon('invalid');
		} else {
			email.setCustomValidity('');
			errorEmail.textContent = '';
			displayValidationIcon('valid');
		}
	});

	email.addEventListener('input', () => {
		if (checkEmailPattern() === true && emailIsTouched) {
			email.setCustomValidity('');
			errorEmail.textContent = '';
			displayValidationIcon('valid');
		}

		if (checkEmailPattern() === false && emailIsTouched) {
			email.setCustomValidity('Please enter a valid email address.');
			errorEmail.textContent = email.validationMessage;
			displayValidationIcon('invalid');
		}
	});

	textarea.addEventListener('change', (event) => {
		const validity = event.target.validity;

		textareaIsTouched = true;

		if (!validity.valid) {
			errorTextarea.textContent = showErrorFor(event.target);
			textarea.style.backgroundColor = `var(--clr-tertiary-200)`;
		}

		if (textarea.checkValidity()) {
			errorTextarea.textContent = '';
			textarea.style.backgroundColor = ``;
		}
	});

	textarea.addEventListener('input', () => {
		if (textarea.validity.tooShort === false) {
			errorTextarea.textContent = '';
			textarea.style.backgroundColor = ``;
		}
	});

	function showErrorFor(target) {
		const errorMessages = {
			name: {
				valueMissing: 'Name is required.',
				tooShort: 'Name is too short.',
				patternMismatch: 'Name format is incorrect.',
			},
			email: {
				valueMissing: 'Email is required.',
				typeMismatch: 'Please enter a valid email address.',
			},
			comments: {
				valueMissing: 'This field cannot be empty.',
				tooShort: 'The text is too short.',
			},
		};

		const targetId = target.id;
		const targetValidityStateObject = target.validity;

		for (const validityFlag in targetValidityStateObject) {
			const validityFlagValue = targetValidityStateObject[validityFlag];
			if (validityFlagValue === true) {
				return errorMessages[targetId][validityFlag];
			}
		}
	}

	function displayValidationIcon(flag) {
		const validationBox = event.target.parentElement;
		if (flag === 'valid') {
			validationBox.classList.contains('invalid') &&
				validationBox.classList.remove('invalid');
			!validationBox.classList.contains('valid') &&
				validationBox.classList.add('valid');
		} else {
			validationBox.classList.contains('valid') &&
				validationBox.classList.remove('valid');
			!validationBox.classList.contains('invalid') &&
				validationBox.classList.add('invalid');
		}
	}

	function checkEmailPattern() {
		const pattern =
			/^.+@[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?\.[A-Za-z]{2,}$/;
		return pattern.test(email.value);
	}

	function checkboxHandler() {
		const checkboxes = document.querySelectorAll('input[type="checkbox');
		const errorCheckbox = checkboxes[0].closest('.column').nextElementSibling;

		const isTreatmentSelected = () => {
			return Array.from(checkboxes).some((checkbox) => checkbox.checked);
		};

		if (!isTreatmentSelected()) {
			errorCheckbox.textContent = 'At least one treatment has to be selected';
			errorCheckbox.previousElementSibling.style.borderColor = 'red';
			return false;
		} else {
			errorCheckbox.textContent = '';
			errorCheckbox.previousElementSibling.style.borderColor = '';
			return true;
		}
	}
</script>
