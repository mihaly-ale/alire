---

---

<form
	action="https://formsubmit.co/1ea487fbf9f0318a3f08a58afcbc5dd0"
	method="POST"
	id="contact-form"
	novalidate
	autocomplete="off">
	<div class="form-group column" data-validate="with-icon">
		<label for="name">Nombre: *</label>
		<input
			id="name"
			type="text"
			minlength="3"
			pattern="^[A-Za-zÀ-ÿ\\s]+$"
			name="name"
			placeholder="Tu nombre"
			required
		/>
		<p class="error-message"></p>
	</div>

	<div class="form-group column" data-validate="with-icon">
		<label for="email">Correo electrónico: *</label>
		<input
			id="email"
			type="email"
			name="email"
			placeholder="Tu email"
			required
		/>
		<p class="error-message"></p>
	</div>

	<div class="form-group column">
		<fieldset class="column">
			<legend> &nbsp; Elige tratamiento &nbsp;</legend>
			<div>
				<input type="checkbox" id="massage" name="services" value="masaje" />
				<label for="massage">Masaje</label>
			</div>
			<div>
				<input
					id="nutrition"
					type="checkbox"
					name="services"
					value="nutricion"
				/>
				<label for="nutrition">Nutrición</label>
			</div>
			<div>
				<input
					id="biomagnet"
					type="checkbox"
					name="services"
					value="biomagnetismo"
				/>
				<label for="biomagnet">Biomagnetismo</label>
			</div>
			<div>
				<input
					id="osteopathy"
					type="checkbox"
					name="services"
					value="osteopatia"
				/>
				<label for="osteopathy">Ostepatía</label>
			</div>
		</fieldset>
		<p class="error-message"></p>
	</div>

	<div class="form-group column">
		<label for="comments">Mensaje: *</label>
		<textarea
			id="comments"
			name="comments"
			placeholder="Escribe tu mensaje"
			minlength="100"
			required></textarea>
		<p class="error-message"></p>
	</div>

	<!-- formsubmit hidden fields -->
	<input type="hidden" name="_subject" value="" />
	<input type="hidden" name="_captcha" value="false" />
	<input type="text" name="_honey" style="display:none" />
	<input type="hidden" name="_template" value="table" />

	<div class="form-group column">
		<input id="submit-button" class="btn" type="submit" value="Enviar" />
	</div>
	<div class="form-group column">
		<p id="submit-feedback"></p>
	</div>
</form>

<style>
	form {
		--error-color-light: var(--clr-tertiary-100);
		--error-color-strong: var(--clr-tertiary-300);
		color: var(--bg-color);
		background: var(--clr-transparent-50);
		padding: var(--rem-spacing-100);
		border-radius: var(--rad-25);

		margin: 0 auto;
		width: 95%;
		max-width: 600px;

		& p {
			margin: 0;
		}
	}

	fieldset {
		border-radius: var(--rad-25);
	}

	textarea,
	fieldset {
		margin-bottom: var(--rem-spacing-75);
	}

	.form-group {
		margin-block-end: var(--rem-spacing-150);
		position: relative;
	}

	.column {
		display: flex;
		flex-direction: column;
		gap: var(--rem-spacing-75);
	}

	input::placeholder,
	textarea::placeholder {
		color: var(--clr-ui-400);
	}

	input:not([type='submit']),
	textarea {
		padding: var(--em-spacing-75);
		border-radius: var(--rad-25);
		color: var(--text-color);
		border: none;

		&:focus {
			outline-offset: 4px;
		}
	}

	input:placeholder-shown,
	textarea:placeholder-shown {
		background-color: var(--bg-color);
	}

	input:not(:placeholder-shown),
	textarea:not(:placeholder-shown) {
		background-color: white;
	}

	input[type='checkbox'] {
		margin-right: var(--em-spacing-50);
		accent-color: var(--clr-primary-100);
	}

	input[type='submit'] {
		font-size: clamp(var(--fs-phone-h4), 2vw, var(--fs-desktop-h3));
		color: var(--bg-color);
		font-weight: var(--fw-500);
		background-color: var(--text-color);
		margin: 0 auto;
		border: 2px solid var(--clr-primary-200);

		&:hover {
			background-color: var(--bg-color);
			color: var(--text-color);
		}

		&:focus {
			opacity: 0.75;
		}
	}

	legend {
		margin-block-end: var(--em-spacing-75);
	}

	label,
	legend {
		font-size: clamp(
			calc(var(--fs-phone-regular) * 1.1),
			1.45vw,
			calc(var(--fs-desktop-regular) * 1.1)
		);
	}

	.error-message {
		height: calc(var(--fs-phone-regular) + calc(var(--em-spacing-75)));
		width: fit-content;
		padding: var(--em-spacing-75) var(--em-spacing-25);
		border-radius: var(--rad-25);

		font-size: clamp(
			var(--fs-phone-regular),
			1.45vw,
			var(--fs-desktop-regular)
		);
		color: var(--error-color-strong);
		font-weight: var(--fw-500);

		display: flex;
		justify-content: center;
		align-items: center;
	}

	.custom-valid {
		background-color: var(--clr-primary-100) !important;
	}
	.custom-invalid {
		background-color: var(--error-color-light) !important;
	}

	[data-validate='with-icon']::before {
		content: '';
		font-weight: 900;
		font-size: clamp(var(--fs-phone-h4), 2vw, var(--fs-desktop-h3));
		position: absolute;
		right: 0;
		width: fit-content;
		height: 100%;
		padding-inline-end: var(--em-spacing-75);

		display: flex;
		align-items: center;
	}

	[data-validate='with-icon'].valid::before {
		content: '✔';
		color: green;
	}

	[data-validate='with-icon'].invalid::before {
		content: '✖';
		color: var(--error-color-light);
	}

	#submit-feedback {
		height: 2rem;
	}
</style>

<script lang="ts">
	const form = document.getElementById('contact-form');
	const name = document.getElementById('name');
	const email = document.getElementById('email');
	const textarea = document.getElementById('comments');
	const subjectField = document.querySelector("[name = '_subject']");

	let isNameFieldTouched = false;
	let isEmailFieldTouched = false;
	let isTextareaTouched = false;

	form.addEventListener('submit', (event) => {
		event.preventDefault();
		const isFormValid = form.checkValidity();
		const isCheckboxValid = checkboxHandler();
		const isTextareaValid = textarea.checkValidity();

		if (isFormValid && isCheckboxValid && isTextareaValid) {
			subjectField.value = `${name.value} solicité cita para ${treatmentRequested()}`;
			const submitFeedback = document.querySelector('#submit-feedback');

			// AJAX start
			const formData = new FormData(form);

			fetch('https://formsubmit.co/1ea487fbf9f0318a3f08a58afcbc5dd0', {
				method: 'POST',
				body: formData,
				headers: {
					'Content-Type': 'application/json',
					Accept: 'application/json',
				},
			})
				.then((response) => {
					if (response.ok) {
						form.reset();
						[name, email, textarea].forEach((input) => {
							clearValidationIndicators(input);
						});
						addSubmitFeedback(
							submitFeedback,
							'Gracias, tu mensaje ha sido enviado.',
							'green'
						);
					} else {
						addSubmitFeedback(
							submitFeedback,
							'Lo sentimos, ocurrió un error. Inténtelo más tarde.',
							'red'
						);
					}
				})
				.catch((error) => {
					console.error('Error:', error);
				});
			// AJAX end
		} else {
			validateField(name, name.parentElement.lastElementChild, true);
			validateField(email, email.parentElement.lastElementChild, true);
			validateField(textarea, textarea.parentElement.lastElementChild, true);
		}
	});

	name.addEventListener('input', (event) => {
		const errorElement = findErrorElement(event.target);
		validateField(event.target, errorElement, isNameFieldTouched);
	});

	name.addEventListener('change', (event) => {
		isNameFieldTouched = markFieldTouched(event.target);
		const errorElement = findErrorElement(event.target);
		validateField(event.target, errorElement, isNameFieldTouched);
	});

	email.addEventListener('change', (event) => {
		isEmailFieldTouched = markFieldTouched(event.target);
		const errorElement = findErrorElement(event.target);
		validateField(event.target, errorElement, isEmailFieldTouched);
	});

	email.addEventListener('input', (event) => {
		const errorElement = findErrorElement(event.target);
		validateField(event.target, errorElement, isEmailFieldTouched);
	});

	textarea.addEventListener('change', (event) => {
		isTextareaTouched = markFieldTouched(event.target);
		const errorElement = findErrorElement(event.target);
		validateField(event.target, errorElement, isTextareaTouched);
	});

	textarea.addEventListener('input', (event) => {
		const errorElement = findErrorElement(event.target);
		validateField(event.target, errorElement, isTextareaTouched);
	});

	function validateField(field, errorElement, isTouched) {
		const isFieldValid =
			field === email ? checkEmailPattern() : field.checkValidity();

		if (isFieldValid) {
			markFieldValid(field);
			displayValidationIcon(field, 'valid');
			errorElement.textContent = '';
		} else if (isFieldValid === false && isTouched) {
			markFieldInValid(field);
			displayValidationIcon(field, 'invalid');
			// prevents overwhelming display of error messages
			if (errorElement.textContent.length === 0) {
				errorElement.textContent = showErrorFor(field);
			}
		}
	}

	function findErrorElement(field) {
		return field.parentElement.lastElementChild;
	}

	function markFieldTouched(field) {
		return true;
	}

	function showErrorFor(target) {
		const errorMessages = {
			name: {
				valueMissing: 'El campo es obligatorio.',
				tooShort: 'El nombre debe tener al menos 3 caracteres.',
				patternMismatch:
					'El formato del nombre es incorrecto. Solo puede contener letras.',
			},
			email: {
				valueMissing: 'El correo electrónico es obligatorio.',
				typeMismatch: 'Por favor, introduce una dirección de correo válida.',
			},
			comments: {
				valueMissing:
					'Por favor, proporciona más detalles sobre el motivo de tu contacto.',
				tooShort: 'El campo debe tener al menos 1000 caracteres.',
			},
		};

		const targetId = target.id;
		const targetValidityStateObject = target.validity;

		for (const validityFlag in targetValidityStateObject) {
			const validityFlagValue = targetValidityStateObject[validityFlag];
			if (validityFlagValue === true) {
				return errorMessages[targetId][validityFlag];
			}
		}
	}

	function displayValidationIcon(input, flag) {
		const validationBox = input.parentElement;
		if (flag === 'valid') {
			validationBox.classList.contains('invalid') &&
				validationBox.classList.remove('invalid');
			!validationBox.classList.contains('valid') &&
				validationBox.classList.add('valid');
		} else {
			validationBox.classList.contains('valid') &&
				validationBox.classList.remove('valid');
			!validationBox.classList.contains('invalid') &&
				validationBox.classList.add('invalid');
		}
	}

	function markFieldValid(field) {
		field.classList.contains('custom-invalid') &&
			field.classList.remove('custom-invalid');
		!field.classList.contains('custom-valid') &&
			field.classList.add('custom-valid');
	}

	function markFieldInValid(field) {
		field.classList.contains('custom-valid') &&
			field.classList.remove('custom-valid');
		!field.classList.contains('custom-invalid') &&
			field.classList.add('custom-invalid');
	}

	function checkEmailPattern() {
		const pattern =
			/^.+@[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?\.[A-Za-z]{2,}$/;
		return pattern.test(email.value);
	}

	function checkboxHandler() {
		const checkboxes = document.querySelectorAll('input[type="checkbox');
		const errorCheckbox = checkboxes[0].closest('.column').nextElementSibling;

		const isTreatmentSelected = () => {
			return Array.from(checkboxes).some((checkbox) => checkbox.checked);
		};

		if (!isTreatmentSelected()) {
			errorCheckbox.textContent =
				'Por favor, selecciona al menos una opción de los tratamientos.';
			errorCheckbox.previousElementSibling.style.borderColor =
				'var(--error-color-light)';
			return false;
		} else {
			errorCheckbox.textContent = '';
			errorCheckbox.previousElementSibling.style.borderColor = '';
			return true;
		}
	}

	function treatmentRequested() {
		const checkboxes = document.querySelectorAll('input[type="checkbox');
		const filteredArray = Array.from(checkboxes).filter(
			(checkbox) => checkbox.checked
		);
		return filteredArray.map((item) => item.value).toString();
	}

	function clearValidationIndicators(formElement) {
		formElement.classList.remove('custom-valid', 'custom-invalid');
		formElement.parentElement.classList.remove('valid', 'invalid');
	}

	function addSubmitFeedback(submitFeedback, message, color) {
		submitFeedback.style.color = color;
		submitFeedback.style.textAlign = 'center';
		submitFeedback.textContent = message;
	}
</script>
